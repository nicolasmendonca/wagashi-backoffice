import produce from 'immer';
import {PersistenceAdapter} from 'adapters/persistence';
import {Ingredient} from 'entities/ingredient';

export const loadIngredients = async (
  persistenceAdapter: PersistenceAdapter<Ingredient[]>
): Promise<Ingredient[]> => {
  return persistenceAdapter.load();
  return new Promise(resolve => {
    persistenceAdapter.load();
    let ingredients = localStorage.getItem(INGREDIENTS_KEY) ?? '[]';
    resolve(JSON.parse(ingredients));
  });
};

export const saveIngredients = async (
  persistenceAdapter: PersistenceAdapter<Ingredient[]>,
  ingredients: Ingredient[]
): Promise<Ingredient[]> => {
  return persistenceAdapter.save(ingredients);
  return new Promise(resolve => {
    localStorage.setItem(INGREDIENTS_KEY, JSON.stringify(ingredients));
    resolve(ingredients);
  });
};

export const updateIngredient = async (ingredient: Ingredient) => {
  const ingredientList = await loadIngredients();
  return new Promise(async (resolve, reject) => {
    const result = produce(ingredientList, draft => {
      const index = draft.findIndex(ingredientItem => ingredientItem.id === ingredient.id);
      if (index === -1) {
        reject('Ingredient not found');
      }
      draft[index] = ingredient;
    });
    await saveIngredients(result);
    resolve(result);
  });
};

export const createIngredient = async (ingredient: Ingredient) => {
  const ingredientList = await loadIngredients();
  return new Promise(async resolve => {
    const result = produce(ingredientList, draft => {
      draft.push(ingredient);
    });
    await saveIngredients(result);
    resolve(result);
  });
};
